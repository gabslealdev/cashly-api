// <auto-generated />
using System;
using Cashly.Infrastructure.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cashly.Infrastructure.Migrations
{
    [DbContext(typeof(CashlyDbContext))]
    partial class CashlyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "cashflow_status", new[] { "red", "yellow", "green" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "transaction_status", new[] { "scheduled", "completed", "canceled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "transaction_type", new[] { "expense", "income" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cashly.Domain.Entities.Cashflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("NUMERIC(12,2)")
                        .HasColumnName("current_balance");

                    b.Property<int>("Status")
                        .HasColumnType("cashflow_status")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("cashflows", (string)null);
                });

            modelBuilder.Entity("Cashly.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Cashly.Domain.Entities.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CashflowId")
                        .HasColumnType("integer")
                        .HasColumnName("cashflow_id");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("CashflowId")
                        .IsUnique();

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Cashly.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CashflowId")
                        .HasColumnType("integer")
                        .HasColumnName("cashflow_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<int>("Status")
                        .HasColumnType("transaction_status")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("transaction_type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("CashflowId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Cashly.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("created_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("password");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Cashly.Domain.Entities.Cashflow", b =>
                {
                    b.HasOne("Cashly.Domain.Entities.User", "User")
                        .WithOne("Cashflow")
                        .HasForeignKey("Cashly.Domain.Entities.Cashflow", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cashly.Domain.Entities.Category", b =>
                {
                    b.OwnsOne("Cashly.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<int>("CategoryId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)")
                                .HasColumnName("name");

                            b1.HasKey("CategoryId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("ix_categories_name");

                            b1.ToTable("categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Cashly.Domain.Entities.Goal", b =>
                {
                    b.HasOne("Cashly.Domain.Entities.Cashflow", "Cashflow")
                        .WithOne("Goal")
                        .HasForeignKey("Cashly.Domain.Entities.Goal", "CashflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Cashly.Domain.ValueObjects.Cash", "Value", b1 =>
                        {
                            b1.Property<int>("GoalId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Value")
                                .HasColumnType("NUMERIC(12,2)")
                                .HasColumnName("value");

                            b1.HasKey("GoalId");

                            b1.ToTable("Goals");

                            b1.WithOwner()
                                .HasForeignKey("GoalId");
                        });

                    b.OwnsOne("Cashly.Domain.ValueObjects.DeadlineGoal", "Deadline", b1 =>
                        {
                            b1.Property<int>("GoalId")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("TIMESTAMPTZ")
                                .HasColumnName("deadline_goal");

                            b1.HasKey("GoalId");

                            b1.ToTable("Goals");

                            b1.WithOwner()
                                .HasForeignKey("GoalId");
                        });

                    b.Navigation("Cashflow");

                    b.Navigation("Deadline")
                        .IsRequired();

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("Cashly.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Cashly.Domain.Entities.Cashflow", "Cashflow")
                        .WithMany("Transactions")
                        .HasForeignKey("CashflowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cashly.Domain.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Cashly.Domain.ValueObjects.Cash", "Amount", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Value")
                                .HasColumnType("NUMERIC(12,2)")
                                .HasColumnName("amount");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Cashflow");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Cashly.Domain.Entities.User", b =>
                {
                    b.OwnsOne("Cashly.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)")
                                .HasColumnName("name");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Cashly.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("ix_users_email");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Cashly.Domain.Entities.Cashflow", b =>
                {
                    b.Navigation("Goal");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashly.Domain.Entities.Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashly.Domain.Entities.User", b =>
                {
                    b.Navigation("Cashflow");
                });
#pragma warning restore 612, 618
        }
    }
}
